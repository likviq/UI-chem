import streamlit as st
import fluoriclogppka
from rdkit import Chem
from rdkit.Chem import Draw, Descriptors, AllChem
from rdkit.Chem.Draw import rdMolDraw2D
import io
import base64
import tempfile
import os
import pandas as pd
from typing import Optional
from streamlit_ketcher import st_ketcher

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="Fluoriclogppka Prediction",
    page_icon="üß™",
    layout="wide"
)

def sdf_to_smiles(sdf_content: str) -> Optional[str]:
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î SDF —Ñ–∞–π–ª –≤ SMILES"""
    try:
        mol_supplier = Chem.SDMolSupplier()
        mol_supplier.SetData(sdf_content)
        
        for mol in mol_supplier:
            if mol is not None:
                return Chem.MolToSmiles(mol)
        return None
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ SDF —Ñ–∞–π–ª—É: {str(e)}")
        return None

def draw_molecule(smiles: str) -> str:
    """–ú–∞–ª—é—î –º–æ–ª–µ–∫—É–ª—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î HTML"""
    try:
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            return "<p>–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏ –º–æ–ª–µ–∫—É–ª—É</p>"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–æ–ª–µ–∫—É–ª–∏
        img = Draw.MolToImage(mol, size=(400, 400))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ base64 –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ HTML
        buffered = io.BytesIO()
        img.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        
        return f'<img src="data:image/png;base64,{img_str}" style="max-width: 100%; height: auto;">'
    except Exception as e:
        return f"<p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞–ª—é–≤–∞–Ω–Ω—ñ –º–æ–ª–µ–∫—É–ª–∏: {str(e)}</p>"

def get_2d_features(smiles: str) -> dict:
    """–û—Ç—Ä–∏–º—É—î 2D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–ª–µ–∫—É–ª–∏"""
    try:
        from fluoriclogppka.ml_part.services.molecule_2d_features_service import Molecule2DFeaturesService
        
        service = Molecule2DFeaturesService(
            SMILES=smiles
        )
        
        return service.features_2d_dict
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É 2D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {str(e)}")
        return None

def get_3d_features(smiles: str, target_value) -> dict:
    """–û—Ç—Ä–∏–º—É—î 3D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–ª–µ–∫—É–ª–∏"""
    try:
        from fluoriclogppka.ml_part.services.molecule_3d_features_service import Molecule3DFeaturesService
        
        service = Molecule3DFeaturesService(
            smiles=smiles,
            target_value=target_value,
            conformers_limit=None
        )
        
        return service.features_3d_dict
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É 3D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {str(e)}")
        return None

def display_2d_features(features_dict: dict):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î 2D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–ª–µ–∫—É–ª–∏ –≤ –æ–¥–Ω–æ–º—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º—É —Ä—è–¥–∫—É"""
    if not features_dict:
        return

    st.subheader("üß¨ 2D –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–ª–µ–∫—É–ª–∏")
    st.markdown("**–û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ ‚Äî –ø–æ –æ–¥–Ω—ñ–π –Ω–∞ –∫–æ–∂–Ω—É –æ–∑–Ω–∞–∫—É
    cols = st.columns(len(features_dict))

    for col, (name, value) in zip(cols, features_dict.items()):
        if value is not None:
            with col:
                # –í–∏–≤–æ–¥–∏–º–æ –Ω–∞–∑–≤—É –æ–∑–Ω–∞–∫–∏ –π –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –æ–¥–Ω–æ–º—É —Å—Ç–∏–ª—ñ
                if isinstance(value, (int, float)):
                    st.metric(name, f"{str(value)}" if isinstance(value, float) else str(value))
                else:
                    st.metric(name, str(value))
    
    with st.expander("–î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –≤—Å—ñ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"):
        df_data = []
        for key, value in features_dict.items():
            if value is not None:
                df_data.append({
                    "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": key,
                    "–ó–Ω–∞—á–µ–Ω–Ω—è": value if not isinstance(value, float) else f"{str(value)}",
                })
        
        if df_data:
            df = pd.DataFrame(df_data)
            st.dataframe(df, use_container_width=True)
        else:
            st.info("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")

def display_3d_features(features_dict: dict):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î 3D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–ª–µ–∫—É–ª–∏ –≤ –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
    if not features_dict:
        return
    
    st.subheader("üß¨ 3D –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–ª–µ–∫—É–ª–∏")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    col1, col2, col3 = st.columns(3)
    
    # –ì—Ä—É–ø—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    basic_features = {
        # "–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä": features_dict.get("identificator"),
        # "–î–∏–ø–æ–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç": features_dict.get("dipole_moment"),
        "–û–±'—î–º –º–æ–ª–µ–∫—É–ª–∏": features_dict.get("mol_volume"),
        "–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞ –≤–∞–≥–∞": features_dict.get("mol_weight"),
        "SASA": features_dict.get("sasa"),
        # "TPSA+F": features_dict.get("tpsa+f")
    }
    
    angle_features = {
        "–ö—É—Ç X1X2R2": features_dict.get("angle_X1X2R2"),
        "–ö—É—Ç X2X1R1": features_dict.get("angle_X2X1R1"),
        # "–ö—É—Ç R2X2R1": features_dict.get("angle_R2X2R1"),
        # "–ö—É—Ç R1X1R2": features_dict.get("angle_R1X1R2"),
        "–î–≤–æ–≥—Ä–∞–Ω–Ω–∏–π –∫—É—Ç": features_dict.get("dihedral_angle")
    }
    
    distance_features = {
        "F –¥–æ FG": features_dict.get("f_to_fg"),
        # "F —Å–≤–æ–±–æ–¥–∞": features_dict.get("f_freedom"),
        "–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –∞—Ç–æ–º–∞–º–∏ –≤ —Ü–∏–∫–ª—ñ": features_dict.get("distance_between_atoms_in_cycle_and_f_group"),
        "–í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ü–µ–Ω—Ç—Ä–∞–º–∏ F-–≥—Ä—É–ø": features_dict.get("distance_between_atoms_in_f_group_centers"),
        # "Cis/Trans": features_dict.get("cis/trans")
    }
    
    with col1:
        st.markdown("**–û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**")
        for name, value in basic_features.items():
            if value is not None:
                if isinstance(value, (int, float)):
                    st.metric(name, f"{value:.4f}" if isinstance(value, float) else str(value))
                else:
                    st.metric(name, str(value))
    
    with col2:
        st.markdown("**–ö—É—Ç–∏:**")
        for name, value in angle_features.items():
            if value is not None:
                if isinstance(value, (int, float)):
                    st.metric(name, f"{value:.4f}¬∞" if isinstance(value, float) else f"{value}¬∞")
                else:
                    st.metric(name, str(value))
    
    with col3:
        st.markdown("**–í—ñ–¥—Å—Ç–∞–Ω—ñ —Ç–∞ –∫–æ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**")
        for name, value in distance_features.items():
            if value is not None:
                if isinstance(value, (int, float)):
                    st.metric(name, f"{value:.4f}" if isinstance(value, float) else str(value))
                else:
                    st.metric(name, str(value))
    
    # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é –∑ —É—Å—ñ–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    with st.expander("–î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –≤—Å—ñ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"):
        df_data = []
        for key, value in features_dict.items():
            if value is not None:
                df_data.append({
                    "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": key,
                    "–ó–Ω–∞—á–µ–Ω–Ω—è": value if not isinstance(value, float) else f"{value:.6f}",
                })
        
        if df_data:
            df = pd.DataFrame(df_data)
            st.dataframe(df, use_container_width=True)
        else:
            st.info("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")

def validate_smiles(smiles: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å SMILES —Ä—è–¥–∫–∞"""
    if not smiles or not isinstance(smiles, str):
        return False
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –∑ –ø–æ—á–∞—Ç–∫—É —ñ –∫—ñ–Ω—Ü—è
    smiles = smiles.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
    if not smiles:
        return False
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–æ–ª–µ–∫—É–ª—É –∑ SMILES
        mol = Chem.MolFromSmiles(smiles)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–ª–µ–∫—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ
        if mol is None:
            return False
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞—Ç–æ–º–∏ –≤ –º–æ–ª–µ–∫—É–ª—ñ
        if mol.GetNumAtoms() == 0:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞–Ω–æ–Ω—ñ—á–Ω–∏–π SMILES
        canonical_smiles = Chem.MolToSmiles(mol)
        if not canonical_smiles:
            return False
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–æ–ª–µ–∫—É–ª—É –∑ –∫–∞–Ω–æ–Ω—ñ—á–Ω–æ–≥–æ SMILES (–¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)
        test_mol = Chem.MolFromSmiles(canonical_smiles)
        if test_mol is None:
            return False
        
        return True
        
    except Exception as e:
        # –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –±—É–¥—å-—è–∫–∞ –ø–æ–º–∏–ª–∫–∞, SMILES –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π
        return False

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üß™ Fluoriclogppka Prediction")
st.markdown("–î–æ–¥–∞—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –º–æ–ª–µ–∫—É–ª –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é fluoriclogppka")

# –†–∞–¥—ñ–æ–±–∞—Ç—Ç–æ–Ω–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –≤–≤–µ–¥–µ–Ω–Ω—è –º–æ–ª–µ–∫—É–ª–∏
input_method_choice = st.radio(
    "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–µ–¥–µ–Ω–Ω—è –º–æ–ª–µ–∫—É–ª–∏:",
    ("üìù –í–≤–µ–¥–µ–Ω–Ω—è SMILES", "üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SDF", "üé® –†–µ–¥–∞–∫—Ç–æ—Ä –º–æ–ª–µ–∫—É–ª"),
    index=0,
    horizontal=True
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ
final_smiles = None
input_method = None
smiles_input = None
uploaded_file = None
editor_smiles = None

# –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±–æ—Ä—É
if input_method_choice == "üìù –í–≤–µ–¥–µ–Ω–Ω—è SMILES":
    st.header("üìù –í–≤–µ–¥–µ–Ω–Ω—è SMILES")
    smiles_input = st.text_area(
        "–í–≤–µ–¥—ñ—Ç—å SMILES —Ä—è–¥–æ–∫:",
        value="FC1(F)CC(C(O)=O)C1",
        height=70,
        help="–í–≤–µ–¥—ñ—Ç—å SMILES –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –º–æ–ª–µ–∫—É–ª–∏"
    )
    
    if smiles_input and validate_smiles(smiles_input):
        final_smiles = smiles_input
        input_method = "–í–≤–µ–¥–µ–Ω–Ω—è SMILES"

elif input_method_choice == "üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SDF":
    st.header("üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SDF")
    uploaded_file = st.file_uploader(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ SDF —Ñ–∞–π–ª:",
        type=['sdf'],
        help="–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∑ –º–æ–ª–µ–∫—É–ª–æ—é –≤ —Ñ–æ—Ä–º–∞—Ç—ñ SDF"
    )
    
    if uploaded_file is not None:
        try:
            sdf_content = uploaded_file.read().decode('utf-8')
            sdf_smiles = sdf_to_smiles(sdf_content)
            if sdf_smiles:
                final_smiles = sdf_smiles
                input_method = "SDF —Ñ–∞–π–ª"
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ SDF —Ñ–∞–π–ª—É: {str(e)}")

elif input_method_choice == "üé® –†–µ–¥–∞–∫—Ç–æ—Ä –º–æ–ª–µ–∫—É–ª":
    st.header("üé® –†–µ–¥–∞–∫—Ç–æ—Ä –º–æ–ª–µ–∫—É–ª")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ streamlit-ketcher –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è –º–æ–ª–µ–∫—É–ª
    molecule = st_ketcher(
        height=400,
        key="molecule_editor"
    )
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    if molecule:
        try:
            # –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö, —è–∫—ñ –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ streamlit-ketcher
            editor_smiles = None
            
            if hasattr(molecule, 'smiles') and molecule.smiles:
                editor_smiles = molecule.smiles
            elif isinstance(molecule, str):
                # –Ø–∫—â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ä—è–¥–æ–∫, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ SMILES
                if validate_smiles(molecule):
                    editor_smiles = molecule
            elif isinstance(molecule, dict):
                # –Ø–∫—â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Å–ª–æ–≤–Ω–∏–∫, —à—É–∫–∞—î–º–æ SMILES
                if 'smiles' in molecule:
                    editor_smiles = molecule['smiles']
                elif 'molfile' in molecule:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ molfile –≤ SMILES
                    try:
                        mol = Chem.MolFromMolBlock(molecule['molfile'])
                        if mol:
                            editor_smiles = Chem.MolToSmiles(mol)
                    except:
                        pass
            
            if editor_smiles and validate_smiles(editor_smiles):
                final_smiles = editor_smiles
                input_method = "–†–µ–¥–∞–∫—Ç–æ—Ä –º–æ–ª–µ–∫—É–ª"
                st.success(f"–û—Ç—Ä–∏–º–∞–Ω–æ SMILES –∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {editor_smiles}")
            else:
                st.info("–ù–∞–º–∞–ª—é–π—Ç–µ –º–æ–ª–µ–∫—É–ª—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ –≤–∏—â–µ")
                
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –º–æ–ª–µ–∫—É–ª–∏ –∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: {str(e)}")
    else:
        st.info("–ù–∞–º–∞–ª—é–π—Ç–µ –º–æ–ª–µ–∫—É–ª—É –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ –≤–∏—â–µ")

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–ª–µ–∫—É–ª–∏
if final_smiles:
    # st.success(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–æ–ª–µ–∫—É–ª–∞ –∑: {input_method}")
    # st.code(f"SMILES: {final_smiles}")
    
    # –ú–∞–ª—é—î–º–æ –º–æ–ª–µ–∫—É–ª—É
    mol_html = draw_molecule(final_smiles)
    st.markdown(mol_html, unsafe_allow_html=True)

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è inference
st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è")

col_params1, col_params2 = st.columns(2)

with col_params1:
    # Target value
    target_options = {
        "pKa": "pKa",
        "logP": "logP"  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —î —ñ–Ω—à—ñ –æ–ø—Ü—ñ—ó
    }
    target_value = st.selectbox(
        "–¶—ñ–ª—å–æ–≤–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å:",
        options=list(target_options.keys()),
        help="–û–±–µ—Ä—ñ—Ç—å –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è"
    )
    
    # Model type
    model_options = {
        "GNN": "gnn",
        "H2O": "h2o"
    }
    model_type = st.selectbox(
        "–¢–∏–ø –º–æ–¥–µ–ª—ñ:",
        options=list(model_options.keys()),
        help="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –º–æ–¥–µ–ª—ñ –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è"
    )

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è", type="primary"):
    if final_smiles:
        try:
            with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è..."):
                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç inference
                inference_params = {
                    "SMILES": final_smiles,
                    "target_value": getattr(fluoriclogppka.Target, target_value),
                    "model_type": getattr(fluoriclogppka.ModelType, model_options[model_type])
                }
                
                inference = fluoriclogppka.Inference(**inference_params)
                
                # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
                result = inference.predict()
                
                # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                st.success("–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
                st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è:")
                
                if isinstance(result, dict):
                    for key, value in result.items():
                        st.metric(key, value)
                else:
                    print(result)
                    s = f"<p style='font-size:30px;'>{target_value}: {result}</p>"
                    st.markdown(s, unsafe_allow_html=True) 

                    features_2d = get_2d_features(final_smiles)

                    display_2d_features(features_2d)

                    features_3d = get_3d_features(final_smiles, getattr(fluoriclogppka.Target, target_value))

                    display_3d_features(features_3d)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session state
                st.session_state['last_prediction'] = {
                    'smiles': final_smiles,
                    'result': result,
                    'parameters': {**inference_params, **features_2d, **features_3d}
                }
                
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è: {str(e)}")
    else:
        st.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞–ª—ñ–¥–Ω—É –º–æ–ª–µ–∫—É–ª—É")

# –†–æ–∑–¥—ñ–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å
if 'last_prediction' in st.session_state:
    st.header("üìà –û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è")
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ"):
        st.json(st.session_state['last_prediction'])
    
    # –ü–æ–∫–∞–∑—É—î–º–æ 3D —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î
    if '3d_features' in st.session_state['last_prediction']:
        display_3d_features(st.session_state['last_prediction']['3d_features'])
